[toplevel]
whoami = sts get-caller-identity

current-account = sts get-caller-identity --query 'Account' --output text

current-partition = !echo aws

current-region = configure get region

running-instances = ec2 describe-instances \
    --filter Name=instance-state-name,Values=running \
    --output table \
    --query 'Reservations[].Instances[].{ID: InstanceId,Hostname: PublicDnsName,Name: Tags[?Key==`Name`].Value | [0],Type: InstanceType, Platform: Platform || `Linux`}'

[command codeartifact]
pick-domain =
    !f() {
        DOMAINS=$(
            aws codeartifact list-domains \
                --query 'domains[].[name]' \
                --output text)
        if [ -z "${DOMAINS}" ]
        then
            echo "No CodeArtifact domains found in the account" >&2
            exit 1
        elif [ $(wc -l <<< "${DOMAINS[@]}") -eq 1 ]
        then
            echo ${DOMAINS}
        else
            printf '%s\n' "${DOMAINS[@]}" | fzf --prompt="Pick a domain> "
        fi
    }; f

pick-repository =
    !f() {
        if [[ "$1" == "" ]]
        then
            echo "Usage: aws codeartifact pick-repository <domain-name>" >&2
            exit 1
        fi
        DOMAIN=$1
        REPOSITORIES=$(
            aws codeartifact list-repositories-in-domain \
                --domain ${DOMAIN} \
                --query 'repositories[].[name]' \
                --output text)
        if [ -z "${REPOSITORIES}" ]
        then
            echo "No CodeArtifact repositories found in the domain ${DOMAIN}" >&2
            exit 1
        elif [ $(wc -l <<< "${REPOSITORIES[@]}") -eq 1 ]
        then
            echo ${REPOSITORIES}
        else
            printf '%s\n' "${REPOSITORIES[@]}" | fzf --prompt="Pick a repository> "
        fi
    }; f

pick-packages =
    !f() {
        if [ $# -lt 2 ]
        then
            echo "Usage: aws codeartifact pick-packages <domain-name> <repository-name>" >&2
            exit 1
        fi

        DOMAIN=$1
        REPOSITORY=$2
        AWS_ACCOUNT_ID=$(aws current-account)
        AWS_REGION=$(aws current-region)
        REPOSITORY_URL="https://${AWS_REGION}.console.aws.amazon.com/codesuite/codeartifact/d/${AWS_ACCOUNT_ID}/${DOMAIN}/r/${REPOSITORY}/p/maven"

        PACKAGES=($(
            aws codeartifact list-packages --domain ${DOMAIN} --repository ${REPOSITORY} --no-paginate | \
            jq -r '.packages[] | .namespace + ":" + .package'
        ))

        if [ ${#PACKAGES[@]} -eq 0 ]
        then
            echo "No CodeArtifact packages found in the repository ${REPOSITORY}" >&2
            exit 1
        fi

        printf '%s\n'  "${PACKAGES[@]}" | \
            fzf --prompt="Pick a package> " --layout reverse --pointer='▶' \
                --header "Enter: View package(s) versions | Ctrl-O: Open in browser | Ctrl-Y: Yank version | Ctrl-U: Yank URL | Ctrl-A: (Un)select all" \
                --header-first \
                --multi \
                --bind ctrl-a:toggle-all \
                --bind 'ctrl-y:execute-silent(echo -n {} | pbcopy)' \
                --bind "ctrl-o:execute-silent(open '${REPOSITORY_URL}/{1}/{2}/versions?region=${AWS_REGION}')" \
                --bind "ctrl-u:execute-silent(echo '${REPOSITORY_URL}/{1}/{2}/versions?region=${AWS_REGION}' | pbcopy)" \
                --delimiter ':' \
                --preview-window='down:50%' \
                --preview "aws codeartifact list-package-versions \
                --domain ${DOMAIN} --repository ${REPOSITORY} \
                --namespace {1} --package {2} \
                --format maven --output json \
            | jq -r '.versions[] | .version + "'": "'" + .status'"
    }; f

[command s3]
pick-bucket =
    !f() {
        BUCKETS=($(aws s3api list-buckets --query 'Buckets[].[Name]' --output text))
        if [ ${#BUCKETS[@]} -eq 0 ]
        then
            echo "No buckets found" >&2
            exit 1
        elif [ ${#BUCKETS[@]} -eq 1 ]
        then
            echo ${BUCKETS}
        else
            S3_URI=https://s3.console.aws.amazon.com/s3/buckets/
            printf '%s\n' "${BUCKETS[@]}" | sort | \
                fzf --prompt="Pick a bucket> " --layout=reverse \
                    --header "Ctrl-A: Yank ARN | Ctrl-Y: Yank name | Ctrl-O: Open in browser | Ctrl-U: Yank URL" \
                    --header-first \
                    --preview "aws s3 ls {}" \
                    --bind "ctrl-a:execute-silent(echo arn:$(aws current-partition):s3:::{} | pbcopy)" \
                    --bind "ctrl-y:execute-silent(echo {} | pbcopy)" \
                    --bind "ctrl-o:execute-silent(open '${S3_URI}{}?region=$(aws current-region)&tab=objects')" \
                    --bind "ctrl-u:execute-silent(echo '${S3_URI}{}?region=$(aws current-region)&tab=objects' | pbcopy)"
        fi
    }; f

pick-object = !echo Not implemented yet >&2

[command secretsmanager]
get-secret-arn =
    !f() {
        if [[ "$1" == "" ]]
        then
            echo "Usage: aws secretsmanager get-secret-arn <secret-name>" >&2
            exit 1
        fi
        aws secretsmanager list-secrets --filters Key=name,Values="${1}" --query 'SecretList[].ARN' --output text
    }; f

get-secret-string =
    !f() {
        if [[ "$1" == "" ]]
        then
            echo "Usage: aws secretsmanager get-secret-value <secret-name>" >&2
            exit 1
        fi
        aws secretsmanager get-secret-value --secret-id "${1}" --query 'SecretString' --output text
    }; f

pick-secret =
    !f() {
        AWS_REGION=$(aws current-region)
        SECRETMANAGER_URL=https://${AWS_REGION}.console.aws.amazon.com/secretsmanager/secret

        aws secretsmanager list-secrets --query 'SecretList[].[Name]' --output text | \
            sort | \
            fzf --prompt="Pick a secret> " --layout reverse --pointer='▶' \
            --header "Ctrl-A: Yank ARN | Ctrl-Y: Yank name | Ctrl-O: Open in browser | Ctrl-U: Yank URL" \
            --header-first \
            --bind "ctrl-a:execute-silent(echo arn:$(aws current-partition):s3:::{} | pbcopy)" \
            --bind 'ctrl-y:execute-silent(echo -n {} | pbcopy)' \
            --bind "ctrl-o:execute-silent(open '${SECRETMANAGER_URL}?name={}&region=${AWS_REGION}')" \
            --bind "ctrl-u:execute-silent(echo '${SECRETMANAGER_URL}?name={}&region=${AWS_REGION}' | pbcopy)" \
            --preview-window='right:50%' \
            --preview 'aws secretsmanager get-secret-value --secret-id {} --query SecretString --output text | jq -C -r .'
    }; f
